#!/usr/bin/env bash
cd bin
. imports.sh "$@"
cd ..

user=$(whoami)
if [[ ${user} = "root" ]]
then
    error "Username: ${user}"
    error "DO NOT run this script under root!"
    exit 1
fi
set_title "ðŸ§° Setup script..."

green "Package template setup..."
if [[ -e "${COMPOSER_JSON_FILE}" ]]
then
    yellow "Found '${COMPOSER_JSON_FILE}' file:"
    printf "${DARK}"
    cat "${COMPOSER_JSON_FILE}"
    printf "${NC}"

    package_owner="$(<PKG/OWNER)"
    package_owner_name="$(<PKG/OWNER_NAME)"
    package_name="$(<PKG/NAME)"
    package_description="$(<PKG/DESCR)"
    package_namespace="$(<PKG/NMSPC)"
    package_owner_namespace="$(<PKG/OWNR_NMSPC)"
    package_dir="$(<PKG/PKGDIR)"
else

    if [[ -e "${DIST_DEFAULTS}" ]]
    then
        source "${DIST_DEFAULTS}"
        package_name="${PACKAGE_NAME}"
        package_owner="${OWNER}"
        package_owner_name="${OWNER_NAME}"
        package_description="${DESCRIPTION}"
        package_dir="${PACKAGE_DIR}"
    else
        package_owner="alecrabbit"
        package_name="moomba"
        package_description="PHP Library"
        package_dir="${package_name}"
        package_owner_name="${package_owner^}"
    fi
    prefix='php-'
    # Ask owner name
    dark "This name used in LICENSE file"
    read -e -p "Enter package owner name [${package_owner_name}]: " input
    package_owner_name="${input:-$package_owner_name}"
    package_owner_name="$(echo ${package_owner_name} | sed -r 's/\<./\U&/g')"
    accepted_value "'${package_owner_name}'"
    # Ask owner
    package_owner=${package_owner_name,,}
    package_owner=${package_owner// /}
    dark "Used in composer.json line: \"name\": \"owner/name\""
    read -e -p "Enter package owner [${package_owner}]: " input
    package_owner="${input:-$package_owner}"
    accepted_value "'${package_owner}'"
    # Ask name
    read -e -p "Enter package name [${package_name}]: " input
    package_name="${input:-$package_name}"
    accepted_value "'${package_name}'"
    # Ask description
    dark "Used in composer.json line: \"description\": \"Your awesome description\""
    read -e -p "Enter package description [${package_description}]: " input
    package_description="${input:-$package_description}"
    accepted_value "'${package_description}'"
    # Ask namespace
    if [[ ${package_name} == *"${prefix}"* ]]
    then
        package_namespace=${package_name#"$prefix"}
    else
        package_namespace="${package_name}"
    fi
    package_namespace="$(echo ${package_namespace//[-_]/ }| sed -r 's/\<./\U&/g')"
    package_namespace=${package_namespace// /}
#
#    package_namespace="${package_namespace^}"
    read -e -p "Enter package namespace [${package_namespace}]: " input
    package_namespace="${input:-$package_namespace}"
    accepted_value "'${package_namespace}'"
    # Ask owner namespace
    package_owner_namespace=""
    read -e -p "Enter package owner namespace [${package_owner_namespace}]: " input
    package_owner_namespace="${input:-$package_owner_namespace}"
    accepted_value "'${package_owner_namespace}'"
    # Ask dir
    if [[ ${package_name} == *"${prefix}"* ]]
    then
        package_dir="${package_name}"
    else
        package_dir="${prefix}${package_name}"
    fi

    read -e -p "Enter package dir [${package_dir}]: " input
    package_dir="${input:-$package_dir}"
    accepted_value "'${package_dir}'"

    echo "ðŸ“¦ ${package_owner^}/${package_name^}" > TERMINAL_TITLE
    yellow "Creating ${COMPOSER_JSON_FILE}"
    if [[ ! ${package_owner_namespace} = "" ]]
    then
        separator='\\\\'
    else
        separator=''
    fi
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g; s/PACKAGE_NAME/${package_name}/g; s/PACKAGE_DESCRIPTION/${package_description}/g; s/PACKAGE_NSPACE/${package_namespace}/g; s/PACKAGE_OWNR_NSPACE/${package_owner_namespace}${separator}/g;" ${COMPOSER_JSON_TEMPLATE} | tee "${COMPOSER_JSON_FILE}"
    printf "${NC}"

    mkdir PKG
    echo "${package_owner}" > PKG/OWNER
    echo "${package_owner_name}" > PKG/OWNER_NAME
    echo "${package_name}" > PKG/NAME
    echo "${package_description}" > PKG/DESCR
    echo "${package_namespace}" > PKG/NMSPC
    echo "${package_owner_namespace}" > PKG/OWNR_NMSPC
    echo "${package_dir}" > PKG/PKGDIR
fi
green "Parameters:"
if [[ ! ${package_owner_namespace} = "" ]]
then
     separator="\\"
else
     separator=""
fi
echo -e "Owner name: ${CYAN}${package_owner_name}${NC}"
echo -e "Directory: ${CYAN}${package_dir}${NC}"
echo -e "Package: ${CYAN}${package_owner}/${package_name}${NC}"
echo -e "Description: ${CYAN}${package_description}${NC}"
echo -e "Namespace: ${CYAN}${package_owner_namespace}${separator}${package_namespace}${NC}"
echo
read -p "Continue? " -n 1 -r -t 10
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
    set_title "ðŸ”§ Running setup script..."

    u_id="$(id -u ${user})"
    g_id="$(id -g ${user})"
    if [[ -e "${ENV_FILE}" ]]
    then
        echo "Removing .env file"
        rm .env
    fi
    green "Creating .env file"
    touch .env
    echo "USER_ID=${u_id}" >> .env
    echo "GROUP_ID=${u_id}" >> .env
    if [[ -e "${GIT_ATTR_FILE}" ]]
    then
        green "Creating .gitattributes file"
        mv ${GIT_ATTR_FILE} .gitattributes
    else
        if [[ -e ".gitattributes" ]]
        then
            echo ".gitattributes file already exists"
        else
            echo ".gitattributes file not found"
        fi
    fi
    mv "${COMPOSER_JSON_FILE}" composer.json
    rm -rf .github/
    rm -rf "src"
    mkdir -p "src/$package_namespace"
    mkdir -p "tests/Feature"
    mkdir -p "tests/Unit"
    mkdir -p ".github"

    rm LICENSE
    if [[ ! ${package_owner_namespace} = "" ]]
    then
         separator='\\'
    else
         separator=""
    fi

    rm  "tests/BasicTest.php"
    yellow "Creating ISSUE_TEMPLATE.md"
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g;" template.ISSUE_TEMPLATE.md | tee ".github/ISSUE_TEMPLATE.md"
    printf "${NC}"
    yellow "Creating LICENSE"
    printf "${DARK}"
    sed "s/__YEAR/$(date +%Y)/g; s/PACKAGE_OWNER_NAME/${package_owner_name}/g;" template.LICENSE | tee LICENSE
    printf "${NC}"
    yellow "Creating BasicClass.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_owner_namespace}${separator}${package_namespace}/g;" template.BasicClass.php | tee "src/$package_namespace/BasicClass.php"
    printf "${NC}"
    yellow "Creating BasicTest.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_owner_namespace}${separator}${package_namespace}/g;" template.BasicTest.php | tee "tests/Unit/BasicTest.php"
    printf "${NC}"
    rm composer.lock
    rm example.composer.json
    rm ${DIST_ENV_FILE}
    rm template.*

    info "Stopping container if started"
    docker-compose down
    info "Renaming package dir"
    cd ..
    mv php-package-template "${package_dir}"
    cd "${package_dir}"

    info "Starting container"
    docker-compose up -d
    info "Installing dependencies"
    docker-compose exec app composer install

    yellow "Deleting old repository"
    rm -rf .git/

    yellow "Deleting tmp setup dir PKG"
    rm -r PKG

    green "Run tests script"
    ./bin/tests --all

    if [[ -x "$(command -v git)" ]]
    then
        green "Initializing new repository"
        git init
        green "Adding files"
        git add --all
        ./git_user.sh
        if [[ $? -ne 0 ]]
        then
            yellow "Can't commit: git user credentials not configured"
        else
            green "Committing files"
            git commit -m 'init'
            green "Git log:"
            git log --graph --oneline
        fi
    fi
    comment "Deleting setup script"
    rm setup
    rm git_user.sh
    info "Stopping container"
    docker-compose down
else
    echo "Setup skipped..."
    echo
fi
