#!/usr/bin/env bash
# It's not a well written bash script but it works :)
for arg
do
    case "$arg" in
        --help)
            params+=("$arg")
            ;;
    esac
done

param_1="$1"
param_2="$2"
param_3="$3"
display_attention_message=0

set -- "${params[@]}"  # overwrites the original positional params

cd bin
. imports.sh
cd ..

setup_help_message

user=$(whoami)
if [[ ${user} = "root" ]]
then
    light_yellow "Username: ${user}"
    error "DO NOT run this script under root!"
    exit 1
fi

set_title "ðŸ§° Setup script..."

green "Package template setup..."
dark "Version $(<bin/VERSION)"
echo
if [[ -e "${COMPOSER_JSON_FILE}" ]]
then

    if [[ ! -z "$param_1" ]]
    then
        display_attention_message=1
    fi

    yellow "Found '${COMPOSER_JSON_FILE}' file:"
    printf "${DARK}"
    cat "${COMPOSER_JSON_FILE}"
    printf "${NC}"

    package_owner="$(<PKG/OWNER)"
    package_owner_name="$(<PKG/OWNER_NAME)"
    package_name="$(<PKG/NAME)"
    package_description="$(<PKG/DESCR)"
    package_namespace="$(<PKG/NMSPC)"
    package_owner_namespace="$(<PKG/OWNR_NMSPC)"
    package_dir="$(<PKG/PKGDIR)"
    if [[ ${package_dir} == "" ]]
    then
        package_dir=$(enter_package_dir "${package_dir}")
        accepted_value "${package_dir}"
    fi

else
    package_description="Awesome library"
    prefix='php-'

    if [[ -e "${GLOBAL_DIST_DEFAULTS}" ]]
    then
        dark "Global settings found: ${GLOBAL_DIST_DEFAULTS}"

        source "${GLOBAL_DIST_DEFAULTS}"
        package_owner_name="${OWNER_NAME}"
        package_owner="${OWNER}"
        package_name="${PACKAGE_NAME}"
    else
        if [[ -e "${DIST_DEFAULTS}" ]]
        then
            source "${DIST_DEFAULTS}"
            package_owner_name="${OWNER_NAME}"
            package_owner="${OWNER}"
            package_name="${PACKAGE_NAME}"
        else
            package_owner_name="Mike Wazowski"
            package_owner="mike-wazowski"
            package_name="monsters-inc"
        fi
    fi
    # Ask owner name
    if [[ ! -z "$param_3" ]]
    then
        package_owner_name="$param_3"
    fi
    package_owner_name=$(read_value "package owner name" "Used in LICENSE file" "${package_owner_name}")
    package_owner_name=$(capitalize_every_word "${package_owner_name}")
    accepted_value "${package_owner_name}"
    # Ask owner
    if [[ ! -z "$param_1" ]]
    then
        package_owner="$param_1"
    fi
    package_owner=${package_owner,,}
    package_owner=${package_owner// /}
    package_owner=$(read_value "package owner" "Used in composer.json line: \"name\": \"owner/name\")" "${package_owner}")
    package_owner=${package_owner,,}
    accepted_value "${package_owner}"
    # Ask name
    if [[ ! -z "$param_2" ]]
    then
        package_name="$param_2"
    fi
    package_name=${package_name,,}
    package_name=$(read_value "package name" "" "${package_name}" "It should be unique among your packages!")
    package_name=${package_name,,}
    accepted_value "${package_name}"
    # Ask description
    package_description=$(read_value "package description" "Used in composer.json line: \"description\": \"Your awesome description\"" "${package_description}")
    accepted_value "${package_description}"
    # Ask namespace
    if [[ ${package_name} == *"${prefix}"* ]]
    then
        package_namespace=${package_name#"$prefix"}
    else
        package_namespace="${package_name}"
    fi
    package_namespace="$(echo ${package_namespace//[-_]/ }| sed -r 's/\<./\U&/g')"
    package_namespace=${package_namespace// /}
    package_namespace=$(read_value "package namespace" "" "${package_namespace}")
    accepted_value "${package_namespace}"
    # Ask owner namespace
    yellow "Type 'y' to choose owner namespace otherwise no namespace will be used"
    read -p "Select namespace? " -n 1 -r -t 10
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo
        namespace=$(remove_symbols "${package_owner_name}")
        package_owner_namespace=$(select_owner_namespace "${namespace}")
    else
        package_owner_namespace=""
    fi
    accepted_value "${package_owner_namespace}"
    # Ask dir
    if [[ ${package_name} == *"${prefix}"* ]]
    then
        package_dir="${package_name}"
    else
        package_dir="${prefix}${package_name}"
    fi
    old_dir="$(basename $(pwd))"
    package_dir=$(enter_package_dir "${package_dir}" "${old_dir}")
    accepted_value "${package_dir}"

    # Creating setup
    yellow "Saving settings"

    mkdir PKG
    echo "${package_owner}" > PKG/OWNER
    echo "${package_owner_name}" > PKG/OWNER_NAME
    echo "${package_name}" > PKG/NAME
    echo "${package_description}" > PKG/DESCR
    echo "${package_namespace}" > PKG/NMSPC
    echo "${package_owner_namespace}" > PKG/OWNR_NMSPC
    echo "${package_dir}" > PKG/PKGDIR

    yellow "Creating ${COMPOSER_JSON_FILE}"
    if [[ ! ${package_owner_namespace} = "" ]]
    then
        separator='\\\\'
    else
        separator=''
    fi
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g; s/PACKAGE_NAME/${package_name}/g; s/PACKAGE_DESCRIPTION/${package_description}/g; s/PACKAGE_NSPACE/${package_namespace}/g; s/PACKAGE_OWNR_NSPACE/${package_owner_namespace}${separator}/g;" ${COMPOSER_JSON_TEMPLATE} | tee "${COMPOSER_JSON_FILE}"
    printf "${NC}"

fi
green "Settings:"
if [[ ! ${package_owner_namespace} = "" ]]
then
     separator="\\"
else
     separator=""
fi
echo -e "Name: ${CYAN}${package_owner_name}${NC}"
echo -e "Package: ${CYAN}${package_owner}/${package_name}${NC}"
echo -e "Description: ${CYAN}${package_description}${NC}"
echo -e "Namespace: ${CYAN}${package_owner_namespace}${separator}${package_namespace}${NC}"
echo -e "Directory: ${CYAN}${package_dir}${NC}"
echo

check_if_dir_exists "../${package_dir}"
if [[ $? == 1 ]]
then
    error "Dir '${package_dir}' is already taken."
    comment "You should start over."
    echo "" > PKG/PKGDIR
    exit 1
fi

dark "Timeout 10 seconds..."
if [[ ${display_attention_message} -ne 0 ]]
then
    echo $(light_yellow "Attention!!!") $(yellow "Stored settings found!")
    echo $(red "Command arguments ignored!")
    echo $(dark "To remove stored settings use:")
    echo $(dark "rm -r PKG && rm ${COMPOSER_JSON_FILE}")
fi

read -p "Continue? " -n 1 -r -t 10
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
    set_title "ðŸ”§ Running setup script..."
    
    # Writing terminal title
    title="ðŸ“¦ ${package_name}"
    dark "Writing terminal title '${title}' to ${TERMINAL_TITLE_FILE} file"
    echo ${title} > ${TERMINAL_TITLE_FILE}
    dark "${TERMINAL_TITLE_FILE} contents:"
    cat ${TERMINAL_TITLE_FILE}


    u_id="$(id -u ${user})"
    g_id="$(id -g ${user})"
    if [[ -e "${ENV_FILE}" ]]
    then
        dark "Removing old .env file"
        rm .env
    fi
    green "Creating .env file"
    touch .env
    echo "USER_ID=${u_id}" >> .env
    echo "GROUP_ID=${u_id}" >> .env
    if [[ -e "${GIT_ATTR_FILE}" ]]
    then
        green "Creating .gitattributes file"
        mv ${GIT_ATTR_FILE} .gitattributes
    else
        if [[ -e ".gitattributes" ]]
        then
            dark ".gitattributes file already exists"
        else
            yellow ".gitattributes file not found"
        fi
    fi
    mv "${COMPOSER_JSON_FILE}" composer.json
    rm -rf .github/
    rm -rf "src"
    mkdir -p "src/$package_namespace"
    mkdir -p "tests/Feature"
    mkdir -p "tests/Unit"
    mkdir -p ".github"

    rm LICENSE
    if [[ ! ${package_owner_namespace} = "" ]]
    then
         separator='\\'
    else
         separator=""
    fi

    rm  "tests/BasicTest.php"
    yellow "Creating ISSUE_TEMPLATE.md"
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g;" template.ISSUE_TEMPLATE.md | tee ".github/ISSUE_TEMPLATE.md"
    printf "${NC}"
    yellow "Creating LICENSE"
    printf "${DARK}"
    sed "s/__YEAR/$(date +%Y)/g; s/PACKAGE_OWNER_NAME/${package_owner_name}/g;" template.LICENSE | tee LICENSE
    printf "${NC}"
    yellow "Creating BasicClass.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_owner_namespace}${separator}${package_namespace}/g;" template.BasicClass.php | tee "src/$package_namespace/BasicClass.php"
    printf "${NC}"
    yellow "Creating BasicTest.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_owner_namespace}${separator}${package_namespace}/g;" template.BasicTest.php | tee "tests/Unit/BasicTest.php"
    printf "${NC}"
    rm composer.lock
    rm example.composer.json
    rm ${DIST_ENV_FILE}
    rm template.*

    info "Stopping container if started"
    docker-compose down
    info "Renaming package dir"
    cd ..
    check_if_dir_exists "${package_dir}"
    if [[ $? == 1 ]]
    then
        error "Dir '${package_dir}' is already taken."
        comment "You should start over."
        dark "Cleaning up..."
        rm -rf "${old_dir}"
        exit 1
    fi
    mv -iT "${old_dir}" "${package_dir}"
    cd "${package_dir}"

    info "Starting container"
    docker-compose up -d
    info "Installing dependencies"
    docker-compose exec app composer install

    dark "Deleting old repository"
    rm -rf .git/

    dark "Deleting tmp setup dir PKG"
    rm -r PKG

    green "Run tests script"
    ./bin/tests --all

    if [[ -x "$(command -v git)" ]]
    then
        green "Initializing new repository"
        git init
        green "Adding files"
        git add --all --verbose
#        ./git_user.sh
        check_git_user
        if [[ $? -ne 0 ]]
        then
            yellow "Can't commit: git user credentials not configured"
            dark "Assuming:"
            dark "'username@example.com' - your email"
            dark "'name' - your name"
            dark "Configure with:"
            dark "git config --global user.email username@example.com"
            dark "git config --global user.name name"
        else
            green "Committing files"
            git commit -m 'init'
            green "Git log:"
            git log --graph --oneline
        fi
    fi
    comment "Deleting setup script"
    rm setup
    info "Stopping container"
    docker-compose down
else
    echo "Setup skipped..."
    dark "To continue run setup script again and press 'y'"
    echo
    dark "To run fresh setup delete '${COMPOSER_JSON_FILE}' and dir 'PKG'"
    dark "Command to use:"
    dark "rm -r PKG && rm ${COMPOSER_JSON_FILE}"
    echo
    set_title "$(pwd)"
fi
