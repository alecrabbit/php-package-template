#!/usr/bin/env bash
cd bin
. imports.sh "$@"
cd ..

user=$(whoami)

set_title "ðŸ§° Setup script..."

green "This script will make setup"
composer_json_file="composer.json.result";
if [[ -e "${composer_json_file}" ]]
then
    yellow "Found '${composer_json_file}' file:"
    printf "${DARK}"
    cat "${composer_json_file}"
    printf "${NC}"

    package_owner="$(<PKG/OWNER)"
    package_name="$(<PKG/NAME)"
    package_description="$(<PKG/DESCR)"
    package_namespace="$(<PKG/NMSPC)"
    package_dir="$(<PKG/PKGDIR)"
else
    package_owner="alecrabbit"
    package_name="moomba"
    package_description="PHP Library"

    # Ask owner
    read -e -p "Enter package owner [${package_owner}]: " input
    package_owner="${input:-$package_owner}"
    # Ask name
    read -e -p "Enter package name [${package_name}]: " input
    package_name="${input:-$package_name}"
    # Ask description
    read -e -p "Enter package description [${package_description}]: " input
    package_description="${input:-$package_description}"
    # Ask namespace
    package_namespace="${package_name^}"
    read -e -p "Enter package namespace [${package_namespace}]: " input
    package_namespace="${input:-$package_namespace}"
    # Ask dir
    package_dir="${package_name}"
    read -e -p "Enter package dir [${package_dir}]: " input
    package_dir="${input:-$package_dir}"

    echo "ðŸ“¦ ${package_owner}/${package_name}" > TERMINAL_TITLE
    yellow "Creating ${composer_json_file}"
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g; s/PACKAGE_NAME/${package_name}/g; s/PACKAGE_DESCRIPTION/${package_description}/g; s/PACKAGE_NSPACE/${package_namespace}/g;" composer.json.template | tee "${composer_json_file}"
    printf "${NC}"

    mkdir PKG
    echo "${package_owner}" > PKG/OWNER
    echo "${package_name}" > PKG/NAME
    echo "${package_description}" > PKG/DESCR
    echo "${package_namespace}" > PKG/NMSPC
    echo "${package_dir}" > PKG/PKGDIR
fi
green "Parameters:"
echo -e "Directory: ${CYAN}${package_dir}${NC}"
echo -e "Package: ${CYAN}${package_owner}/${package_name}${NC}"
echo -e "Description: ${CYAN}${package_description}${NC}"
echo -e "Namespace: ${CYAN}${package_namespace}${NC}"
echo
read -p "Continue? " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
    set_title "ðŸ”§ Running setup script..."

    u_id="$(id -u ${user})"
    g_id="$(id -g ${user})"
    if [[ -e "${ENV_FILE}" ]]
    then
        echo "Removing .env file"
        rm .env
    fi
    green "Creating .env file"
    touch .env
    echo "USER_ID=${u_id}" >> .env
    echo "GROUP_ID=${u_id}" >> .env
    if [[ -e ".gitattributes.dist" ]]
    then
        green "Creating .gitattributes file"
        mv .gitattributes.dist .gitattributes
    else
        if [[ -e ".gitattributes" ]]
        then
            echo ".gitattributes file already exists"
        else
            echo ".gitattributes file not found"
        fi
    fi
    mv "${composer_json_file}" composer.json
    rm -rf "src"
    mkdir -p "src/$package_namespace"
    mkdir -p "tests/Feature"
    mkdir -p "tests/Unit"
    yellow "Creating ISSUE_TEMPLATE.md"
    printf "${DARK}"
    sed "s/PACKAGE_OWNER/${package_owner}/g;" ./.github/ISSUE_TEMPLATE.md | tee ./.github/ISSUE_TEMPLATE.md
    printf "${NC}"
    yellow "Creating BasicClass.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_namespace}/g;" BasicClass.php.template | tee "src/$package_namespace/BasicClass.php"
    printf "${NC}"
    rm  "tests/BasicTest.php"
    yellow "Creating BasicTest.php"
    printf "${DARK}"
    sed "s/PACKAGE_NSPACE/${package_namespace}/g;" BasicTest.php.template | tee "tests/Unit/BasicTest.php"
    printf "${NC}"
    rm composer.lock
    rm composer.json.example
    rm .env.dist
    rm *.template

    info "Renaming package dir"
    info "Stopping container if started"
    docker-compose down
    cd ..
    mv php-package-template "${package_name}"
    cd "${package_name}"

    info "Starting container"
    docker-compose up -d
    info "Installing dependencies"
    docker-compose exec app composer install

    yellow "Deleting old repository"
    rm -rf .git/
    yellow "Deleting setup script"
    rm setup

    yellow "Deleting tmp setup dir PKG"
    rm -r PKG

#    green "Initializing new repository"
#    docker-compose exec app git init
#    green "Adding files"
#    docker-compose exec app git add *
##    green "Committing files"
##    docker-compose exec app git commit -m 'init'

    green "Run tests script"
    ./bin/tests --all

    if [[ -x "$(command -v git)" ]]
    then
        green "Initializing new repository"
        git init
        green "Adding files"
        git add *
        green "Committing files"
        git commit -m 'init'
        green "Git log:"
        git log --graph --oneline
    fi
    cd ..

else
    echo "Skip setup"
    echo
fi
