#!/usr/bin/env sh
_OWNER="alecrabbit"
_PACKAGE="sh-php-dev-helper"
_REPOSITORY="${_OWNER}/${_PACKAGE}"
_LATEST_VERSION="0.0.32"
__TMP_DIR=".tmp"

_ppt_help_message () {
    echo "Usage:"
    echo "./${BASE_FILENAME} [options]"
    echo
    echo "Options:"
    echo "    -h                 - show this help message and exit"
    echo "    -y                 - do not ask questions"
    echo "    -p name            - package name"
    echo "    -o owner           - package owner"
    echo "    -n name            - package owner name"
    echo "    -s namespace       - package owner namespace"
    echo "    -x                 - do not use package owner namespace, overrides '-s' option"
    exit 0
}

_ppt_get_realpath ()
{
    if _ppt_check_command "realpath"
    then
        ppt_new_="$(realpath ${1} 2>&1)"
        if [ $? -ne ${PPT_TRUE} ]
        then
            _ppt_debug "Error: ${ppt_new_}"
            _ppt_debug "Using _ppt_backup_realpath function"
            echo "$(_ppt_backup_realpath "${1}")"
            return ${PPT_TRUE}
        fi
        echo "${ppt_new_}"
    else
        echo "$(_ppt_backup_realpath "${1}")"
    fi
}

_ppt_backup_realpath () {
    ppt_path_=${1}

    # prepend current directory to relative paths
    echo "${ppt_path_}" |grep '^/' >/dev/null 2>&1 \
        || ppt_path_="${PWD}/${ppt_path_}"

    # clean up the path. if all seds supported true regular expressions, then
    # this is what it would be:
    ppt_old_=${ppt_path_}
    while true; do
        ppt_new_=`echo "${ppt_old_}" | sed 's/[^/]*\/\.\.\/*//;s/\/\.\//\//'`
        [ "${ppt_old_}" = "${ppt_new_}" ] && break
        ppt_old_=${ppt_new_}
    done
    echo "${ppt_new_}"

    unset ppt_path_ ppt_old_ ppt_new_
}

_ppt_check_command () {
    if [ -x "$(command -v ${1})" ]; then
        return ${PPT_TRUE}
    fi
    return ${PPT_FALSE}
}

_ppt_has_docker ()
{
    if _ppt_check_command "docker"
    then
        _ppt_debug "Has 'docker' command 🐳"
        return ${PPT_TRUE}
    fi
    return ${PPT_FALSE}
}

_ppt_has_docker_compose ()
{
    if _ppt_check_command "docker-compose"
    then
        _ppt_debug "Has 'docker-compose' command 🐳"
        return ${PPT_TRUE}
    fi
    return ${PPT_FALSE}
}

_ppt_show_accepted_value () {
    _ppt_print "${__ppt_ansi_dark} Accepted value: '${1}'${__ppt_ansi_none}"
    _ppt_print ""
}
_ppt_ask_values () {
    _ppt_package_name=$(_ppt_read_value "package name" "${_ppt_package_name}" "" "It should be unique among your packages!")
    _ppt_refine_package_name
    _ppt_show_accepted_value "${_ppt_package_name}"

    _ppt_package_owner=$(_ppt_read_value "package owner" "${_ppt_package_owner}" "Used in composer.json line: \"name\": \"owner/name\")")
    _ppt_refine_package_owner
    _ppt_show_accepted_value "${_ppt_package_owner}"

    _ppt_package_owner_name=$(_ppt_read_value "package owner name" "${_ppt_package_owner_name}" "Used in LICENSE file")
    _ppt_show_accepted_value "${_ppt_package_owner_name}"

    _ppt_package_description=$(_ppt_read_value "package description" "${_ppt_package_description}" "Used in composer.json line: \"description\": \"Your awesome description\"")
    _ppt_show_accepted_value "${_ppt_package_description}"

    _ppt_package_namespace=$(_ppt_prepare_package_namespace "${_ppt_package_name}")
    _ppt_package_namespace=$(_ppt_read_value "package namespace" "${_ppt_package_namespace}")
    _ppt_show_accepted_value "${_ppt_package_namespace}"

    _ppt_package_owner_namespace=$(_ppt_read_value "package owner namespace" "${_ppt_package_owner_namespace}")
    _ppt_show_accepted_value "${_ppt_package_owner_namespace}"

    _ppt_prepare_package_dir
    _ppt_package_dir=$(_ppt_read_value "package dir" "${_ppt_package_dir}" "" "It should be new non-existent yet dir name!")
    _ppt_show_accepted_value "${_ppt_package_dir}"
}

_ppt_refine_package_name () {
    _ppt_package_name=$(_ppt_lowercase "$(_ppt_remove_spaces "${_ppt_package_name}")")
}

_ppt_prepare_package_dir () {
    _ppt_package_dir="$(_ppt_remove_suffix "${PPT_PACKAGE_DIR_SUFFIX}" "${_ppt_package_name}")"
    _ppt_package_dir="${PPT_PACKAGE_DIR_PREFIX}$(_ppt_remove_prefix "${PPT_PACKAGE_DIR_PREFIX}" "${_ppt_package_dir}")${PPT_PACKAGE_DIR_SUFFIX}"
}

_ppt_refine_package_owner () {
    _ppt_package_owner=$(_ppt_lowercase "$(_ppt_remove_spaces "${_ppt_package_owner}")")
}

_ppt_prepare_package_namespace () {
    __namespace=$(_ppt_lowercase "${1}")
    __namespace=$(_ppt_remove_prefix "${PPT_PACKAGE_DIR_PREFIX}" "${__namespace}")
    __namespace=$(_ppt_remove_symbols "-_" $(_ppt_capitalize_every_word "${__namespace}"))
    _ppt_debug "Package namespace '${__namespace}'"
    echo "${__namespace}"
    unset __namespace
}

_ppt_save_values () {
    _ppt_debug "Saving settings"
    _ppt_debug "Full path '$(_ppt_get_realpath ${_PPT_SETTINGS_DIR})'"
    __dir="${_PPT_SETTINGS_DIR}"
    if [ -d "${__dir}" ]
    then
        _ppt_error "Directory '${__dir}' exists"
    else
        _ppt_info "Creating directory '${__dir}'"
        mkdir -p "${__dir}"
    fi

    echo "PPT_PACKAGE_OWNER=\"${_ppt_package_owner}\"
PPT_PACKAGE_OWNER_NAME=\"${_ppt_package_owner_name}\"
PPT_PACKAGE_NAME=\"${_ppt_package_name}\"
PPT_PACKAGE_DESCRIPTION=\"${_ppt_package_description}\"
PPT_PACKAGE_NAMESPACE=\"${_ppt_package_namespace}\"
PPT_PACKAGE_OWNER_NAMESPACE=\"${_ppt_package_owner_namespace}\"
PPT_PACKAGE_DIR=\"${_ppt_package_dir}\"" > "${PPT_SETTINGS_STORAGE}"
    unset __dir
}

_ppt_load_values() {
    __dir="$(_ppt_get_realpath ${_PPT_SETTINGS_DIR})"
    _ppt_dark "Found saved settings: '${PPT_SETTINGS_STORAGE}'"
    . "${PPT_SETTINGS_STORAGE}"
    _ppt_package_owner=${PPT_PACKAGE_OWNER}
    _ppt_package_owner_name=${PPT_PACKAGE_OWNER_NAME}
    _ppt_package_name=${PPT_PACKAGE_NAME}
    _ppt_package_description=${PPT_PACKAGE_DESCRIPTION}
    _ppt_package_namespace=${PPT_PACKAGE_NAMESPACE}
    _ppt_package_owner_namespace=${PPT_PACKAGE_OWNER_NAMESPACE}
    _ppt_package_dir=${PPT_PACKAGE_DIR}
    unset __dir PPT_PACKAGE_OWNER PPT_PACKAGE_OWNER_NAME PPT_PACKAGE_NAME PPT_PACKAGE_DESCRIPTION PPT_PACKAGE_NAMESPACE PPT_PACKAGE_OWNER_NAMESPACE PPT_PACKAGE_DIR
}

__ppt_ask_question () {
    printf "${1} [y/n] "
    __ppt_old_stty_cfg=$(stty -g)
    stty raw -echo

    if [ ${_ppt_silent_setup:-${PPT_FALSE}} -eq ${PPT_TRUE} ]
    then
        __ppt_answer="y"
    else
        # __ppt_answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )  # only yn accepted
        __ppt_answer=$(head -c 1)  # anything accepted
    fi

    stty ${__ppt_old_stty_cfg}
    unset __ppt_old_stty_cfg
    if echo "$__ppt_answer" | grep -iq "^y" ;then
        echo "y"
        _ppt_debug "Confirmed"
        unset __ppt_answer
        return ${PPT_TRUE}
    fi
    echo
    unset __ppt_answer
    return ${PPT_FALSE}
}

_ppt_read_value () {
    __ppt_value_name=${1}
    __ppt_result=${2}
    __ppt_comment=${3:-}
    __ppt_notice=${4:-}
    __ppt_space=" "

    if [ ! -z "${__ppt_notice}" ]
    then
        __ppt_notice=$(printf "${__ppt_ansi_bold_yellow}${__ppt_notice}${__ppt_ansi_none}\n ")
        __ppt_space=""
    fi
    if [ ! -z "${__ppt_comment}" ]
    then
        __ppt_comment=$(printf "${__ppt_ansi_dark}(${__ppt_comment})${__ppt_ansi_none}\n ")
    fi
    __ppt_question=$(printf "${__ppt_space}Enter ${__ppt_value_name}:\n ")
    __ppt_question="${__ppt_notice}${__ppt_question}${__ppt_comment}[${__ppt_result}] "

    read -p "${__ppt_question}" __ppt_input
    echo "${__ppt_input:-$__ppt_result}"
    unset __ppt_value_name __ppt_question __ppt_comment __ppt_result __ppt_notice __ppt_input __ppt_space
}

_ppt_settings_dir_is_consistent () {
    __PPT_FILES=""
    __PPT_FILES="${__PPT_FILES} ${_SETTINGS_FILE}"
    _ppt_dir_is_consistent "${_PPT_SETTINGS_DIR}" "${__PPT_FILES}"
    return $?
}

_ppt_results_dir_is_consistent () {
    __PPT_FILES=""
    __PPT_FILES="${__PPT_FILES} ${_COMPOSER_JSON}"
    __PPT_FILES="${__PPT_FILES} ${_CHANGELOG_MD}"
    __PPT_FILES="${__PPT_FILES} ${_README_MD}"
    _ppt_dir_is_consistent "${_PPT_RESULTS_DIR}" "${__PPT_FILES}"
    return $?
}

_ppt_dir_is_consistent () {
    __PPT_FILES="${2}"
    __PPT_DIR="${1}"
    for __FILE in ${__PPT_FILES}; do
        if [ ! -e "${__PPT_DIR}/${__FILE}" ]
        then
            _ppt_dark "Not found: '${__PPT_DIR}/${__FILE}'"
            _ppt_dark "To start over remove dir '${__PPT_DIR}' "
            unset __PPT_FILES __FILE
            return ${PPT_FALSE}
        fi
    done
    unset __PPT_DIR __PPT_FILES __FILE
    return ${PPT_TRUE}
}

_ppt_create_files_from_templates() {
    _ppt_debug "Preparing and writing results"
    # Remove old results
    _ppt_remove_dir "${_PPT_RESULTS_DIR}"

    # Prepare dir
    __DIR_NAME="$(echo "${_SRC_DIR}" |sed "s/PACKAGE_NSPACE/${_ppt_package_namespace}/g;")"
    _ppt_create_dir "${_PPT_RESULTS_DIR}/${__DIR_NAME}"
    unset __DIR_NAME

    _ppt_create_dir "${_PPT_RESULTS_DIR}/${_TESTS_DIR}"
    _ppt_create_dir "${_PPT_GITHUB_DIR}"
    _ppt_debug "Writing files"

    # Saving .env
    __ppt_user="$(whoami)"

    __ppt_u_id="$(id -u ${__ppt_user})"
    __ppt_g_id="$(id -g ${__ppt_user})"

    echo "USER_ID=${__ppt_u_id}
GROUP_ID=${__ppt_g_id}" > "${PPT_ENV_FILE}"

    _ppt_debug "Contents of '${PPT_ENV_FILE}':
$(cat "${PPT_ENV_FILE}")"
    _ppt_comment "Saved '${PPT_ENV_FILE}'$(_ppt_debug "This file needed to pass user ids to container")"

    unset __ppt_u_id __ppt_g_id __ppt_user

    # Saving composer.json
    if [ ! ${_ppt_package_owner_namespace} = "" ]
    then
        __separator='\\\\'
    else
        __separator=''
    fi
    _ppt_debug "Contents of '${PPT_COMPOSER_JSON_FILE}':
$(sed "s/PACKAGE_OWNER/${_ppt_package_owner}/g; s/PACKAGE_NAME/${_ppt_package_name}/g; s/PACKAGE_DESCRIPTION/${_ppt_package_description}/g; s/PACKAGE_NSPACE/${_ppt_package_namespace}/g; s/PACKAGE_OWNR_NSPACE/${_ppt_package_owner_namespace}${__separator}/g;" ${PPT_COMPOSER_JSON_TEMPLATE} | tee "${PPT_COMPOSER_JSON_FILE}")"
    _ppt_comment "Saved '${PPT_COMPOSER_JSON_FILE}'"

    # Saving CHANGELOG.md
    _ppt_debug "Contents of '${PPT_CHANGELOG_MD_FILE}':
$(sed "s/PACKAGE_OWNER/${_ppt_package_owner}/g; s/PACKAGE_NAME/${_ppt_package_name}/g;" ${PPT_CHANGELOG_MD_TEMPLATE} | tee "${PPT_CHANGELOG_MD_FILE}")"
    _ppt_comment "Saved '${PPT_CHANGELOG_MD_FILE}'"

    # Saving README.md
    _ppt_debug "Contents of '${PPT_README_MD_FILE}':
$(sed "s/PACKAGE_OWNER/${_ppt_package_owner}/g; s/PACKAGE_NAME/${_ppt_package_name}/g; s/PACKAGE_DESCRIPTION/${_ppt_package_description}/g;" ${PPT_README_MD_TEMPLATE} | tee "${PPT_README_MD_FILE}")"
    _ppt_comment "Saved '${PPT_README_MD_FILE}'"

    # Saving .github/ISSUE_TEMPLATE.md
    _ppt_debug "Contents of '${PPT_ISSUE_TEMPLATE_MD_FILE}':
$(sed "s/PACKAGE_OWNER/${_ppt_package_owner}/g;" ${PPT_ISSUE_TEMPLATE_MD_TEMPLATE} | tee "${PPT_ISSUE_TEMPLATE_MD_FILE}")"
    _ppt_comment "Saved '${PPT_ISSUE_TEMPLATE_MD_FILE}'"

    # Saving LICENSE
    _ppt_debug "Contents of '${PPT_LICENSE_FILE}':
$(sed "s/__YEAR/$(date +%Y)/g; s/PACKAGE_OWNER_NAME/${_ppt_package_owner_name}/g;" ${PPT_LICENSE_TEMPLATE} | tee "${PPT_LICENSE_FILE}")"
    _ppt_comment "Saved '${PPT_LICENSE_FILE}'"

    # Saving TERMINAL_TITLE
    _ppt_debug "Contents of '${PPT_TITLE_FILE}':
$(sed "s/PACKAGE_NAME/${_ppt_package_name}/g;" ${PPT_TITLE_TEMPLATE} | tee "${PPT_TITLE_FILE}")"
    _ppt_comment "Saved '${PPT_TITLE_FILE}'"

    # Saving TODO.md
    _ppt_debug "Contents of '${PPT_TODO_FILE}':
$(sed "s/PACKAGE_OWNER/${_ppt_package_owner}/g; s/PACKAGE_NAME/${_ppt_package_name}/g;" ${PPT_TODO_MD_TEMPLATE} | tee "${PPT_TODO_FILE}")"
    _ppt_comment "Saved '${PPT_TODO_FILE}'"

    # Separator
    if [ ! ${_ppt_package_owner_namespace} = "" ]
    then
        __separator='\\'
    else
        __separator=''
    fi
    # Saving BasicClass.php
    __PHP_FILE="$(echo "${PPT_BASIC_CLASS_PHP_FILE}" |sed "s/PACKAGE_NSPACE/${_ppt_package_namespace}/g;")"
    _ppt_debug "Contents of '${__PHP_FILE}':
$(sed "s/PACKAGE_NSPACE/${_ppt_package_owner_namespace}${__separator}${_ppt_package_namespace}/g;" ${PPT_BASIC_CLASS_PHP_TEMPLATE} | tee "${__PHP_FILE}")"
    _ppt_comment "Saved '${__PHP_FILE}'"
    unset __PHP_FILE

    # Saving BasicTest.php
    _ppt_debug "Contents of '${PPT_BASIC_TEST_PHP_FILE}':
$(sed "s/PACKAGE_NSPACE/${_ppt_package_owner_namespace}${__separator}${_ppt_package_namespace}/g;" ${PPT_BASIC_TEST_PHP_TEMPLATE} | tee "${PPT_BASIC_TEST_PHP_FILE}")"
    _ppt_comment "Saved '${PPT_BASIC_TEST_PHP_FILE}'"

    # Saving .gitattributes
    cp "${PPT_GITATTRIBUTES_TEMPLATE}" "${PPT_GITATTRIBUTES_FILE}"
    _ppt_debug "Contents of '${PPT_GITATTRIBUTES_FILE}':
$(cat "${PPT_GITATTRIBUTES_FILE}")"
    _ppt_comment "Saved '${PPT_GITATTRIBUTES_FILE}'"

    # Saving .gitignore
    cp "${PPT_GITIGNORE_TEMPLATE}" "${PPT_GITIGNORE_FILE}"
    _ppt_debug "Contents of '${PPT_GITIGNORE_FILE}':
$(cat "${PPT_GITIGNORE_FILE}")"
    _ppt_comment "Saved '${PPT_GITIGNORE_FILE}'"

    unset __separator
}

#_ppt_continue_setup() {
#    if __ppt_ask_question "Continue setup?"
#    then
#        return ${PPT_TRUE}
#    fi
#    return ${PPT_FALSE}
#}

__updater_install () {
    VERSION_FILE="${BASE_DIR}/.bin/php-dev-helper-lib/VERSION"

    __dir="./${__TMP_DIR}"
    _ppt_debug "Removing '${__dir}'\n$(rm -rfv "${__dir}" 2>&1)"
    _ppt_debug "Recreating '${__dir}'\n$(mkdir "${__dir}" 2>&1)"
    _ppt_debug "Recreating '${__dir}'\n$(mkdir .bin 2>&1)"
    _ppt_debug "Recreating '$(_ppt_get_realpath "${__dir}")"
    _ppt_debug "Downloading to '${__dir}/${_PACKAGE}-${1}'"
    _ppt_debug "$(cd "${__dir}" && wget -qO- "https://github.com/${_REPOSITORY}/archive/${1}.tar.gz" | tar -xzv 2>&1)"
    # shellcheck disable=SC2181
     if [ $? -eq 0 ]
    then
        _ppt_debug "Package downloaded"
        _ppt_debug "Copying new files to '${BASE_DIR}'\n$(cp -rv "${__dir}/${_PACKAGE}-${1}"/. "${BASE_DIR}"/.bin/. 2>&1)"
        _ppt_debug "Renaming\n$(mv "${BASE_DIR}/.bin/php-tests-dev" "${BASE_DIR}/.bin/php-tests" 2>&1)"

        _ppt_debug "Writing new version ${1} > ${VERSION_FILE}"
        # shellcheck disable=SC2116
        _ppt_debug "Writing new version\n$(echo "${1}" > "${VERSION_FILE}" 2>&1)"
        _ppt_debug "Cleanup '${__dir}'\n$(rm -rfv "${__dir}" 2>&1)"
        _ppt_info "Install complete: version ${1}"
    else
        _ppt_fatal "Error occurred during download"
    fi
    unset __dir
}

_ppt_make_setup () {
    _ppt_info "Installing"
    _ppt_comment "Copying files..."
    _ppt_debug "Copying \n$(cp -rv .results/. . 2>&1)"
    _ppt_comment "Installing tests helper"

    __version="$(github_get_latest_version "${_REPOSITORY}" 2>&1)"
    if [ $? -eq "${PPT_FALSE}" ];
    then
        _ppt_error "${__version}"
        return "${PPT_FALSE}"
    else
        _LATEST_VERSION="${__version}"
    fi
    _ppt_debug "Using version: ${_LATEST_VERSION}"
    __updater_install "${_LATEST_VERSION}"
}

_ppt_make_cleanup () {
    _ppt_info "Cleaning up..."
    _ppt_comment "Removing files..."
    _ppt_debug "Removing '.git'\n$(rm -rvf .git/ 2>&1)"
    _ppt_debug "Removing '${_PPT_SETTINGS_DIR}'\n$(rm -rv ${_PPT_SETTINGS_DIR}/ 2>&1)"
    _ppt_debug "Removing '${_PPT_RESULTS_DIR}'\n$(rm -rv ${_PPT_RESULTS_DIR}/ 2>&1)"
    _ppt_debug "Removing '${_PPT_TEMPLATES_DIR}'\n$(rm -rv ${_PPT_TEMPLATES_DIR}/ 2>&1)"
    _ppt_debug "Removing '${LIB_SOURCE}'\n$(rm -rv ${LIB_SOURCE}/ 2>&1)"

    _ppt_debug "Removing 'composer.lock'\n$(rm -v composer.lock 2>&1)"
    _ppt_debug "Removing '${BASE_FILENAME}'\n$(rm -v ${BASE_FILENAME} 2>&1)"

}

_ppt_rename_package_dir () {
    _ppt_info "Renaming package dir"
#    _ppt_current_dir="$(_ppt_get_current_dir)"
    cd ..
    _ppt_debug "Renaming '${_ppt_current_dir}' -> '${_ppt_package_dir}'"
    if _ppt_check_if_dir_exists "${_ppt_package_dir}"
    then
        _ppt_error "Dir '${_ppt_package_dir}' is already taken."
#        _ppt_comment "You should start over."
        _ppt_info "In file '$(_ppt_get_realpath "${_ppt_current_dir}/${_PPT_SETTINGS_DIR}/${_SETTINGS_FILE}")'"
        _ppt_info "change variable value"
        _ppt_comment "PPT_PACKAGE_DIR=\"${_ppt_package_dir}\""
        _ppt_info "and start install again."
        _ppt_info ""
        return ${PPT_FALSE}
    fi
    mv -i "${_ppt_current_dir}" "${_ppt_package_dir}"
    cd "${_ppt_package_dir}"
    _ppt_current_dir="$(_ppt_get_current_dir)"
    return ${PPT_TRUE}
}

_ppt_get_current_dir () {
    __dir="$(basename $(pwd))"
    _ppt_debug "Current dir '${__dir}'"
    echo "${__dir}"
    unset __dir
}

_ppt_add_remote () {
    remote="https://github.com/${1}/${2}.git"
    _ppt_debug "Adding remote ${remote}"
    if __ppt_ask_question "Add remote on '${remote}'?"
    then
        _ppt_debug "Adding remote\n $(git remote add origin "${remote}")"
        _ppt_comment "Added remote '${remote}'"

    fi
}

