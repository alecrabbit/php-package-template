#!/usr/bin/env sh

_ppt_help_message () {
    echo "Usage:"
    echo "./${BASE_FILENAME} [options]"
    echo
    echo "Options:"
    echo "    -h                 - show this help message and exit"
    echo "    -y                 - do not ask questions"
    echo "    -p name            - package name"
    echo "    -o owner           - package owner"
    echo "    -n name            - package owner name"
    echo "    -s namespace       - package owner namespace"
    echo "    -x                 - do not use package owner namespace, overrides '-s' option"
    exit 0
}

_ppt_realpath ()
{
    if _ppt_check_command "realpath"
    then
        echo "$(realpath ${1})"
    else
        ppt_path_=${1}

        # prepend current directory to relative paths
        echo "${ppt_path_}" |grep '^/' >/dev/null 2>&1 \
            || ppt_path_="${PWD}/${ppt_path_}"

        # clean up the path. if all seds supported true regular expressions, then
        # this is what it would be:
        ppt_old_=${ppt_path_}
        while true; do
            ppt_new_=`echo "${ppt_old_}" | sed 's/[^/]*\/\.\.\/*//;s/\/\.\//\//'`
            [ "${ppt_old_}" = "${ppt_new_}" ] && break
            ppt_old_=${ppt_new_}
        done
        echo "${ppt_new_}"

        unset ppt_path_ ppt_old_ ppt_new_
    fi
}

_ppt_check_command () {
    if [ -x "$(command -v ${1})" ]
    then
        return ${PPT_TRUE}
    fi
    return ${PPT_FALSE}
}

_ppt_has_docker ()
{
    return $(_ppt_check_command "docker")
}

_ppt_has_docker_compose ()
{
    return $(_ppt_check_command "docker-compose")
}

_ppt_show_accepted_value () {
    _ppt_print "${__ppt_ansi_dark} Accepted value: '${1}'${__ppt_ansi_none}"
    _ppt_print ""
}
_ppt_ask_values () {
    _ppt_package_name=$(_ppt_read_value "package name" "${_ppt_package_name}" "" "It should be unique among your packages!")
    _ppt_show_accepted_value "${_ppt_package_name}"
    _ppt_package_owner=$(_ppt_read_value "package owner" "${_ppt_package_owner}" "Used in composer.json line: \"name\": \"owner/name\")")
    _ppt_show_accepted_value "${_ppt_package_owner}"
    _ppt_package_owner_name=$(_ppt_read_value "package owner name" "${_ppt_package_owner_name}" "Used in LICENSE file")
    _ppt_show_accepted_value "${_ppt_package_owner_name}"
    _ppt_package_description=$(_ppt_read_value "package description" "${_ppt_package_description}" "Used in composer.json line: \"description\": \"Your awesome description\"")
    _ppt_show_accepted_value "${_ppt_package_description}"
    _ppt_package_namespace=$(_ppt_read_value "package namespace" "${_ppt_package_namespace}")
    _ppt_show_accepted_value "${_ppt_package_namespace}"
    _ppt_package_owner_namespace=$(_ppt_read_value "package owner namespace" "${_ppt_package_owner_namespace}")
    _ppt_show_accepted_value "${_ppt_package_owner_namespace}"
    _ppt_package_dir=$(_ppt_read_value "package dir" "${_ppt_package_dir}" "" "It should be new non-existent yet dir name!")
    _ppt_show_accepted_value "${_ppt_package_dir}"

#    if __ppt_ask_question "Are you ready?"
#    then
#        _ppt_info "OK"
#    fi
}

_ppt_save_values () {
    _ppt_debug "Saving settings"
    __dir=$(_ppt_realpath ${_PPT_SETTINGS_DIR})
    if [ -d ${__dir} ]
    then
        _ppt_error "Directory '${__dir}' exists"
    else
        _ppt_info "Creating directory '${_PPT_SETTINGS_DIR}'"
        _ppt_debug "Full path '${__dir}'"
        mkdir -p ${__dir}
    fi

    echo "PPT_PACKAGE_OWNER=\"${_ppt_package_owner}\"
PPT_PACKAGE_OWNER_NAME=\"${_ppt_package_owner_name}\"
PPT_PACKAGE_NAME=\"${_ppt_package_name}\"
PPT_PACKAGE_DESCRIPTION=\"${_ppt_package_description}\"
PPT_PACKAGE_NAMESPACE=\"${_ppt_package_namespace}\"
PPT_PACKAGE_OWNER_NAMESPACE=\"${_ppt_package_owner_namespace}\"
PPT_PACKAGE_DIR=\"${_ppt_package_dir}\"" > "${__dir}/${_SETTINGS_FILE}"
}

__ppt_ask_question () {
    printf "${1} [y/n] "
    __ppt_old_stty_cfg=$(stty -g)
    stty raw -echo
#    __ppt_answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )  # only yn accepted
    __ppt_answer=$(head -c 1)  # anything accepted
    stty ${__ppt_old_stty_cfg}
    unset __ppt_old_stty_cfg
    echo
    if echo "$__ppt_answer" | grep -iq "^y" ;then
        unset __ppt_answer
        return ${PPT_TRUE}
    fi
    unset __ppt_answer
    return ${PPT_FALSE}
}

_ppt_read_value () {
    __ppt_value_name=${1}
    __ppt_result=${2}
    __ppt_comment=${3:-}
    __ppt_notice=${4:-}
    __ppt_space=" "

    if [ ! -z "${__ppt_notice}" ]
    then
        __ppt_notice=$(printf "${__ppt_ansi_bold_yellow}${__ppt_notice}${__ppt_ansi_none}\n ")
        __ppt_space=""
    fi
    if [ ! -z "${__ppt_comment}" ]
    then
        __ppt_comment=$(printf "${__ppt_ansi_dark}(${__ppt_comment})${__ppt_ansi_none}\n ")
    fi
    __ppt_question=$(printf "${__ppt_space}Enter ${__ppt_value_name}:\n ")
    __ppt_question="${__ppt_notice}${__ppt_question}${__ppt_comment}[${__ppt_result}] "

    read -p "${__ppt_question}" __ppt_input
    echo "${__ppt_input:-$__ppt_result}"
    unset __ppt_value_name __ppt_question __ppt_comment __ppt_result __ppt_notice __ppt_input __ppt_space
}

_ppt_settings_dir_is_consistent () {
    __PPT_FILES=""
    __PPT_FILES="${__PPT_FILES} ${_SETTINGS_FILE}"
    __PPT_FILES="${__PPT_FILES} ${_COMPOSER_JSON}"
    __PPT_FILES="${__PPT_FILES} ${_CHANGELOG_MD}"
    __PPT_FILES="${__PPT_FILES} ${_README_MD}"
    for __FILE in ${__PPT_FILES}; do
        if [ ! -e "${_PPT_SETTINGS_DIR}/${__FILE}" ]
        then
            _ppt_dark "Not found: ${_PPT_SETTINGS_DIR}/${__FILE}"
            unset __PPT_FILES __FILE
            return ${PPT_FALSE}
        fi
    done
    unset __PPT_FILES __FILE
    return ${PPT_TRUE}
}

