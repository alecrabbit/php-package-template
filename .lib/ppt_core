#!/usr/bin/env sh
### Define constants
PPT_TRUE=0
PPT_FALSE=1
PPT_ERROR=2
# Debug settings
PPT_DEBUG=${DEBUG:-0}
PPT_ALLOW_ROOT=${ALLOW_ROOT:-0}
PPT_TITLE=${PPT_TITLE:-1}
### Set color output
PPT_COLOR=${PPT_COLOR:-auto} # Options are 'never', 'always', or 'auto'.

### COLORS
# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

### Color Constants
__PPT_ANSI_DARK='\033[2m'

__PPT_ANSI_NONE='\033[0m'
__PPT_ANSI_RED='\033[0;31m'
__PPT_ANSI_BOLD_RED='\033[1;31m'
__PPT_ANSI_GREEN='\033[0;32m'
__PPT_ANSI_BOLD_GREEN='\033[1;32m'
__PPT_ANSI_YELLOW='\033[0;33m'
__PPT_ANSI_BOLD_YELLOW='\033[1;33m'
__PPT_ANSI_CYAN='\033[0;36m'
__PPT_ANSI_BOLD_CYAN='\033[1;36m'

### Define
__ppt_reset_colors () {
    __ppt_ansi_none=''
    __ppt_ansi_dark=''
    __ppt_ansi_red=''
    __ppt_ansi_green=''
    __ppt_ansi_yellow=''
    __ppt_ansi_cyan=''
    __ppt_ansi_bold_red=''
    __ppt_ansi_bold_green=''
    __ppt_ansi_bold_yellow=''
    __ppt_ansi_bold_cyan=''
}
__ppt_set_colors () {
    __ppt_ansi_none=${__PPT_ANSI_NONE}
    __ppt_ansi_dark=${__PPT_ANSI_DARK}
    __ppt_ansi_red=${__PPT_ANSI_RED}
    __ppt_ansi_green=${__PPT_ANSI_GREEN}
    __ppt_ansi_yellow=${__PPT_ANSI_YELLOW}
    __ppt_ansi_cyan=${__PPT_ANSI_CYAN}
    __ppt_ansi_bold_red=${__PPT_ANSI_BOLD_RED}
    __ppt_ansi_bold_green=${__PPT_ANSI_BOLD_GREEN}
    __ppt_ansi_bold_yellow=${__PPT_ANSI_BOLD_YELLOW}
    __ppt_ansi_bold_cyan=${__PPT_ANSI_BOLD_CYAN}
}
### Set defaults
__ppt_reset_colors

### Logging functions.
_ppt_warn() {
  _ppt_print "⚠️  ${__ppt_ansi_bold_yellow}ppt:WARN${__ppt_ansi_none} $*"
}
_ppt_error() {
  _ppt_print "🛑 ${__ppt_ansi_bold_red}ppt:ERROR${__ppt_ansi_none} $*"
}
_ppt_fatal() {
  _ppt_print "🔥 ${__ppt_ansi_bold_red}ppt:FATAL${__ppt_ansi_none} $*"
  exit ${PPT_ERROR}
}
### Messages functions
_ppt_print () {
    printf "${1}" >&2
    if [ ${2:-${PPT_TRUE}} = ${PPT_TRUE} ]; then
        echo >&2
    fi
}

_ppt_debug() {
if [ ${PPT_DEBUG} -eq 1 ]
then
    _ppt_dark "Debug: ${1}"
fi
}

_ppt_dark() {
  _ppt_print "${__ppt_ansi_dark}$*${__ppt_ansi_none}"
}

_ppt_info() {
  _ppt_print "${__ppt_ansi_green}$*${__ppt_ansi_none}"
}

_ppt_comment() {
  _ppt_print "${__ppt_ansi_yellow}$*${__ppt_ansi_none}"
}

_ppt_notice() {
  _ppt_print "${__ppt_ansi_bold_yellow}$*${__ppt_ansi_none}"
}


_ppt_configureColor() {
  _ppt_color_=${PPT_FALSE}  # By default, no color.
  case $1 in
    'always') _ppt_color_=${PPT_TRUE} ;;
    'auto')
      ( exec tput >/dev/null 2>&1 )  # Check for existence of tput command.
      if [ $? -lt 127 ]; then
        _ppt_tput_=`tput colors`
        # shellcheck disable=SC2166,SC2181
        [ $? -eq 0 -a "${_ppt_tput_}" -ge 16 ] && _ppt_color_=${PPT_TRUE}
      fi
      ;;
    'none') ;;
    *) _ppt_fatal "unrecognized color option '${1}'" ;;
  esac

  case ${_ppt_color_} in
    ${PPT_TRUE})
      __ppt_set_colors
      ;;
    ${PPT_FALSE})
      __ppt_reset_colors
      ;;
  esac

  unset _ppt_color_ _ppt_tput_
}

_ppt_check_user () {
    if [ $(whoami) = "root" ]; then
        if [ ${PPT_ALLOW_ROOT} -eq 0 ]; then
                _ppt_fatal "DO NOT run this script under root!"
            fi
    fi
}

_ppt_set_terminal_title () {
    if [ ${PPT_TITLE} -eq 1 ]
    then
        printf "\033]0;${1}\007"
    fi
}


_ppt_check_if_dir_exists  () {
    __DIRECTORY=$(_ppt_realpath "${1}")
    if [ $? -eq ${PPT_TRUE} ]
    then
        if [ -d "${__DIRECTORY}" ]; then
            if [ ! -L "${__DIRECTORY}" ]; then
                unset __DIRECTORY
                return ${PPT_TRUE}
            fi
        fi
    fi
    unset __DIRECTORY
    return ${PPT_FALSE}
}

_ppt_capitalize_every_word () {
    echo "$@" | sed -f "${LIB_DIR}/capitalize.sed"
}

_ppt_lowercase () {
    echo ${1} |tr '[:upper:]' '[:lower:]'
}

_ppt_uppercase () {
    echo ${1} | tr '[:lower:]' '[:upper:]'
}

_ppt_remove_spaces () {
    echo ${1} | sed "s/ //g"
}

_ppt_remove_symbols () {
    __symbols="[${1}]"
    echo ${2} | sed "s/${__symbols}//g"
    unset __symbols
}

_ppt_replace_symbols_by_space () {
    __symbols="[${1}]"
    echo ${2} | sed "s/${__symbols}/ /g"
    unset __symbols
}

_ppt_remove_prefix () {
    echo "${2#${1}}"
}

_ppt_remove_suffix () {
    echo "${2%${1}}"
}

_ppt_check_git_user () {
    if [ -z "$(git config user.email)" ]
    then
        return ${PPT_FALSE}
    fi
    if [ -z "$(git config user.name)" ]
    then
        return ${PPT_FALSE}
    fi
    return ${PPT_TRUE}
}


_ppt_create_dir () {
    __dir="${1}"
    _ppt_debug "Create: checking dir '${__dir}'"
    if _ppt_check_if_dir_exists "${__dir}"
    then
        _ppt_warn "Directory '${__dir}' already exists"
    else
        _ppt_debug "Creating directory '${__dir}'"
        mkdir -p ${__dir}
    fi
    unset __dir
}

_ppt_remove_dir () {
    __dir="${1}"
    _ppt_debug "Remove: checking dir '${__dir}'"
    if _ppt_check_if_dir_exists "${__dir}"
    then
        _ppt_debug "Removing directory '${__dir}'"
        rm -r ${__dir}
        if [ $? -ne ${PPT_TRUE} ]; then
            _ppt_warn "Unable to remove dir"
            _ppt_comment "Dir: '${__dir}'"
            _ppt_comment "Remove manually"
        fi
    else
        _ppt_debug "Directory '${__dir}' not exists"
    fi
    unset __dir
}
