#!/usr/bin/env sh

PPT_SETTINGS_FILENAME=".ppt_settings.defaults"
PPT_GLOBAL_SETTINGS_DEFAULTS="${HOME}/${PPT_SETTINGS_FILENAME}"
PPT_SETTINGS_DEFAULTS="${LIB_DIR}/${PPT_SETTINGS_FILENAME}"

_PPT_SETTINGS_DIR=".settings";
_PPT_TEMPLATES_DIR=".templates";

_COMPOSER_JSON="composer.json"
_CHANGELOG_MD="CHANGELOG.md"
_README_MD="README.md"

COMPOSER_JSON_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_COMPOSER_JSON}"
COMPOSER_JSON_FILE="${_PPT_SETTINGS_DIR}/${_COMPOSER_JSON}"

CHANGELOG_MD_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_CHANGELOG_MD}"
CHANGELOG_MD_FILE="${_PPT_SETTINGS_DIR}/${_CHANGELOG_MD}"

README_MD_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_README_MD}"
README_MD_FILE="${_PPT_SETTINGS_DIR}/${_README_MD}"

_ppt_declare_variables_defaults() {
    # Variables defaults
    _ppt_continue_setup=${PPT_FALSE}
    _ppt_silent_setup=${PPT_FALSE}
    display_attention_message=${PPT_FALSE}
    _ppt_do_add_origin=${PPT_FALSE}
    _ppt_vcs_service="github"
    # Arguments defaults
    _ppt_param_package_name=""
    _ppt_param_owner=""
    _ppt_param_owner_name=""

    # Settings defaults
    package_owner="mike-wazowski"
    package_owner_name="Mike Wazowski"
    package_name="new-package"
    package_description="Awesome description"
    package_namespace="Package"
    package_owner_namespace="MikeWazowski"
    package_dir="php-new-package"

    # Values
    current_dir="$(basename $(pwd))"

    _ppt_load_defaults

    _ppt_reassign_variables_with_args "$@"
}

_ppt_load_defaults_files () {
    _ppt_load_defaults_file ${PPT_GLOBAL_SETTINGS_DEFAULTS} ||
     _ppt_load_defaults_file ${PPT_SETTINGS_DEFAULTS}
}
_ppt_load_defaults_file () {
    _ppt_debug "Searching settings: '${1}'"
    if [ -e ${1} ]
    then
        . ${1}
        _ppt_debug "Using settings file '${1}'"
        return ${PPT_TRUE}
    fi
    _ppt_debug "Settings not found: '${1}'"

    return ${PPT_FALSE}
}

_ppt_load_defaults () {
    _ppt_load_defaults_files

    _ppt_debug "PPT_PACKAGE_OWNER: ${PPT_PACKAGE_OWNER}"
    _ppt_debug "PPT_PACKAGE_OWNER_NAME: ${PPT_PACKAGE_OWNER_NAME}"
    _ppt_debug "PPT_PACKAGE_NAME: ${PPT_PACKAGE_NAME}"
    _ppt_debug "PPT_PACKAGE_DESCRIPTION: ${PPT_PACKAGE_DESCRIPTION}"
    _ppt_debug "PPT_PACKAGE_NAMESPACE: ${PPT_PACKAGE_NAMESPACE}"
    _ppt_debug "PPT_PACKAGE_OWNER_NAMESPACE: ${PPT_PACKAGE_OWNER_NAMESPACE}"
    _ppt_debug "PPT_PACKAGE_DIR: ${PPT_PACKAGE_DIR}"

    # Settings defaults
    package_owner=${PPT_PACKAGE_OWNER:-$package_owner}
    package_owner_name=${PPT_PACKAGE_OWNER_NAME:-$package_owner_name}
    package_name=${PPT_PACKAGE_NAME:-$package_name}
    package_description=${PPT_PACKAGE_DESCRIPTION:-$package_description}
    package_namespace=${PPT_PACKAGE_NAMESPACE:-$package_namespace}
    package_owner_namespace=${PPT_PACKAGE_OWNER_NAMESPACE:-$package_owner_namespace}
    package_dir=${PPT_PACKAGE_DIR:-$package_dir}

    unset PPT_PACKAGE_OWNER PPT_PACKAGE_OWNER_NAME PPT_PACKAGE_NAME PPT_PACKAGE_DESCRIPTION PPT_PACKAGE_NAMESPACE PPT_PACKAGE_OWNER_NAMESPACE PPT_PACKAGE_DIR
}

_ppt_reassign_variables_with_args () {
    ### Read positional arguments
    _ppt_param_package_name="${1:-}"
    _ppt_param_owner="${2:-}"
    _ppt_param_owner_name="${3:-}"

    if [ ! -z "${_ppt_param_owner}" ]
    then
        package_owner=${_ppt_param_owner}
    fi
    if [ ! -z "${_ppt_param_package_name}" ]
    then
        package_name=${_ppt_param_package_name}
    fi
    if [ ! -z "${_ppt_param_owner_name}" ]
    then
        package_owner_name=${_ppt_param_owner_name}
    fi
    unset _ppt_param_package_name _ppt_param_owner _ppt_param_owner_name
 }
_ppt_color_cyan () {
   echo "${__ppt_ansi_cyan}${1}${__ppt_ansi_none}"
}
_ppt_color_bold_cyan () {
   echo "${__ppt_ansi_bold_cyan}${1}${__ppt_ansi_none}"
}
_ppt_show_values () {
    _ppt_print "Name: $(_ppt_color_bold_cyan "${package_owner_name}")"
    _ppt_print "Package: $(_ppt_color_bold_cyan "${package_owner}/${package_name}")"
    _ppt_print "Description: $(_ppt_color_bold_cyan "${package_description}")"
    _ppt_print "Namespace: $(_ppt_color_bold_cyan "${package_owner_namespace}${package_namespace}")"
    _ppt_print "Directory: $(_ppt_color_bold_cyan "${package_dir}")"
}

_ppt_echo_variables () {
    echo "param_package_name: '${_ppt_param_package_name}'"
    echo "param_owner: '${_ppt_param_owner}'"
    echo "param_owner_name: '${_ppt_param_owner_name}'"
    echo "_ppt_continue_setup: '${_ppt_continue_setup}'"
    echo "_ppt_silent_setup: '${_ppt_silent_setup}'"
    echo "display_attention_message: '${display_attention_message}'"
    echo "_ppt_do_add_origin: '${_ppt_do_add_origin}'"
    echo "_ppt_vcs_service: '${_ppt_vcs_service}'"
    echo "current_dir: '${current_dir}'"
    _ppt_show_values
}

_ppt_show_messages () {
    _ppt_has_docker
    if [ $? -eq ${PPT_TRUE} ]
    then
        _ppt_info "üê≥ has docker"
    else
        _ppt_error "NO docker"
    fi
    _ppt_has_docker_compose
    if [ $? -eq ${PPT_TRUE} ]
    then
        _ppt_info "üê≥ has docker-compose"
    else
        _ppt_error "NO docker-compose"
    fi
    _ppt_dark "dark sample message"
    _ppt_notice "notice sample message"
    _ppt_comment "comment sample message"
    _ppt_info "info sample message"
    _ppt_warn "warning sample message"
    _ppt_error "error sample message"
    _ppt_fatal "fatal sample message"
}

