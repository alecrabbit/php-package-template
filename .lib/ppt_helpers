#!/usr/bin/env sh

_PPT_SETTINGS_DIR=".settings";
_PPT_TEMPLATES_DIR=".templates";

_COMPOSER_JSON="composer.json"
_CHANGELOG_MD="CHANGELOG.md"
_README_MD="README.md"

COMPOSER_JSON_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_COMPOSER_JSON}"
COMPOSER_JSON_FILE="${_PPT_SETTINGS_DIR}/${_COMPOSER_JSON}"

CHANGELOG_MD_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_CHANGELOG_MD}"
CHANGELOG_MD_FILE="${_PPT_SETTINGS_DIR}/${_CHANGELOG_MD}"

README_MD_TEMPLATE="${_PPT_TEMPLATES_DIR}/${_README_MD}"
README_MD_FILE="${_PPT_SETTINGS_DIR}/${_README_MD}"

_ppt_declare_variables_defaults() {
    # Variables defaults
    continue_setup=${PPT_FALSE}
    silent_setup=${PPT_FALSE}
    display_attention_message=${PPT_FALSE}
    do_add_origin=${PPT_FALSE}
    vcs_service="github"
    # Arguments defaults
    param_package_name=""
    param_owner=""
    param_owner_name=""

    # Settings defaults
    package_owner=""
    package_owner_name=""
    package_name=""
    package_description=""
    package_namespace=""
    package_owner_namespace=""
    package_dir=""

    # Values
    current_dir="$(basename $(pwd))"
}

_ppt_echo_variables () {
    echo "param_package_name: '${param_package_name}'"
    echo "param_owner: '${param_owner}'"
    echo "param_owner_name: '${param_owner_name}'"
    echo "continue_setup: '${continue_setup}'"
    echo "silent_setup: '${silent_setup}'"
    echo "display_attention_message: '${display_attention_message}'"
    echo "do_add_origin: '${do_add_origin}'"
    echo "vcs_service: '${vcs_service}'"
    echo "current_dir: '${current_dir}'"

    echo "package_owner: ${package_owner}"
    echo "package_owner_name: ${package_owner_name}"
    echo "package_name: ${package_name}"
    echo "package_description: ${package_description}"
    echo "package_namespace: ${package_namespace}"
    echo "package_owner_namespace: ${package_owner_namespace}"
    echo "package_dir: ${package_dir}"
}

_ppt_show_messages () {
    _ppt_has_docker
    if [ $? -eq ${PPT_TRUE} ]
    then
        _ppt_info "🐳 has docker"
    else
        _ppt_error "NO docker"
    fi
    _ppt_has_docker_compose
    if [ $? -eq ${PPT_TRUE} ]
    then
        _ppt_info "🐳 has docker-compose"
    else
        _ppt_error "NO docker-compose"
    fi
    _ppt_dark "dark sample message"
    _ppt_notice "notice sample message"
    _ppt_comment "comment sample message"
    _ppt_info "info sample message"
    _ppt_warn "warning sample message"
    _ppt_error "error sample message"
    _ppt_fatal "fatal sample message"
}
_ppt_realpath ()
{
    if [ -x "$(command -v realpath)" ]
    then
        echo "$(realpath ${1})"
    else
        ppt_path_=${1}

        # prepend current directory to relative paths
        echo "${ppt_path_}" |grep '^/' >/dev/null 2>&1 \
            || ppt_path_="${PWD}/${ppt_path_}"

        # clean up the path. if all seds supported true regular expressions, then
        # this is what it would be:
        ppt_old_=${ppt_path_}
        while true; do
            ppt_new_=`echo "${ppt_old_}" | sed 's/[^/]*\/\.\.\/*//;s/\/\.\//\//'`
            [ "${ppt_old_}" = "${ppt_new_}" ] && break
            ppt_old_=${ppt_new_}
        done
        echo "${ppt_new_}"

        unset ppt_path_ ppt_old_ ppt_new_
    fi
}

_ppt_has_docker ()
{
    if [ ! -x "$(command -v docker)" ]
    then
        return ${PPT_FALSE}
    fi
    return ${PPT_TRUE}
}

_ppt_has_docker_compose ()
{
    if [ ! -x "$(command -v docker-compose)" ]
    then
        return ${PPT_FALSE}
    fi
    return ${PPT_TRUE}
}
